{"version":3,"sources":["NewHello01.jsx","NewHello02.jsx","NewHello03.jsx","NewHello04.jsx","NewHello.jsx","App.js","serviceWorker.js","index.js"],"names":["NewHello01","className","NewHello02","NewHello03","NewHello04","NewHello","props","console","log","name","address","children","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mPAaeA,MAXf,WAEE,OACE,yBAAKC,UAAU,SACb,2CACA,sCAAW,oDAAX,gBCMSC,MAXf,WAEE,OACE,yBAAKD,UAAU,SACb,8CACA,sCAAW,oDAAX,gBCMSE,MAXf,WAEE,OACE,yBAAKF,UAAU,SACb,8CACA,sCAAW,oDAAX,gBCMSG,MAXf,WAEE,OACE,yBAAKH,UAAU,SACb,8CACA,sCAAW,oDAAX,gBCUSI,MAff,SAAkBC,GAIhB,OAFAC,QAAQC,IAAIF,GAGV,yBAAKL,UAAU,SACb,4BAAKK,EAAMG,MACX,2BAAIH,EAAMI,SACV,2BAAIJ,EAAMK,YCwBDC,MAzBf,WACE,OACE,6BAEE,6BACA,mGACA,6BAEA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,6BACA,sLACA,6BACA,kBAAC,EAAD,CAAUH,KAAK,OAAOC,QAAQ,YAC9B,kBAAC,EAAD,CAAUD,KAAK,qBAAMC,QAAQ,yCAA7B,kBACA,kBAAC,EAAD,CAAUD,KAAK,qBAAMC,QAAQ,yCAA7B,sBACA,kBAAC,EAAD,CAAUD,KAAK,qBAAMC,QAAQ,yCAA7B,kBChBcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.33270ca9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction NewHello01(){\r\n\r\n  return(\r\n    <div className=\"hello\">\r\n      <h2>Hello World</h2>\r\n      <p>This is <strong>[NewHello01.jsx]</strong> Component</p>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default NewHello01","import React from 'react'\r\n\r\nfunction NewHello02(){\r\n\r\n  return(\r\n    <div className=\"hello\">\r\n      <h2>Hello World 02</h2>\r\n      <p>This is <strong>[NewHello02.jsx]</strong> Component</p>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default NewHello02","import React from 'react'\r\n\r\nfunction NewHello03(){\r\n\r\n  return(\r\n    <div className=\"hello\">\r\n      <h2>Hello World 03</h2>\r\n      <p>This is <strong>[NewHello03.jsx]</strong> Component</p>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default NewHello03","import React from 'react'\r\n\r\nfunction NewHello04(){\r\n\r\n  return(\r\n    <div className=\"hello\">\r\n      <h2>Hello World 04</h2>\r\n      <p>This is <strong>[NewHello04.jsx]</strong> Component</p>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default NewHello04","import React from 'react'\r\n\r\nfunction NewHello(props){\r\n  // props에 name=\"hihi\" 값이 불러들어와서 들어감\r\n  console.log(props)\r\n\r\n  return(\r\n    <div className=\"hello\">\r\n      <h2>{props.name}</h2>\r\n      <p>{props.address}</p>\r\n      <p>{props.children}</p>\r\n\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default NewHello","import React from 'react'\nimport './App.css'\nimport NewHello01 from './NewHello01'\nimport NewHello02 from './NewHello02'\nimport NewHello03 from './NewHello03'\nimport NewHello04 from './NewHello04'\nimport NewHello from './NewHello'\n\n// 나중에 App 부분 이름만 바뀌고 형식은 똑같음\nfunction App(){\n  return(\n    <div>\n      {/* 새로운 컴포넌트를 불러오는 코드를 작성 (대문자 NewHello01.jsx) */}\n      <br/>\n      <p>여러 컴포넌트를 불러오기</p>\n      <br/>\n\n      <NewHello01/>\n      <NewHello02/>\n      <NewHello03/>\n      <NewHello04/>\n\n      <hr/>\n      <p>한 컴포넌트에 값을 받아와 위와 같은 형식으로 만들어보기</p>\n      <br/>\n      <NewHello name=\"name\" address=\"address\"/>\n      <NewHello name=\"김땡땡\" address=\"강서구 방화동\">props.children</NewHello>\n      <NewHello name=\"박땡땡\" address=\"양천구 신정동\">안녀엉</NewHello>\n      <NewHello name=\"최땡땡\" address=\"강서구 발산동\">ㅋㅋ</NewHello>\n    </div>\n  )\n}\n\n//다른데서 이 파일을 쓰려면 아래 구문이 필요함\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}